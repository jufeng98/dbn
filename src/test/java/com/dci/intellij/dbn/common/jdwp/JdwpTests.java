package com.dci.intellij.dbn.common.jdwp;


import java.nio.ByteBuffer;
import java.util.Arrays;
// this is to test that the readPackets function can read each single packet if :
// *i get a packet devided
// * if got more than one packet
public class JdwpTests {
    static class TunnelConnection {
        byte[][] data = new byte[][]{
//				{0, 0, 0, 71, 0, 0, 0, 13, 0, 64, 100, 0, 0, 0, 0, 1, 8, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 69, 0, 0, 0, 33, 76, 36, 79, 114, 97, 99, 108, 101, 47, 80, 97, 99, 107, 97, 103, 101, 47, 83, 89, 83, 47, 68, 66, 77, 83, 95, 79, 85, 84, 80, 85, 84, 59, 0, 0, 0, 7, 0, 0, 0, 75, 0, 0, 0, 16, 0},
//                {64, 100, 0, 0, 0, 0, 1, 8, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 70, 0, 0, 0, 37, 76, 36, 79, 114, 97, 99, 108, 101, 47, 80, 97, 99, 107, 97, 103, 101, 66, 111, 100, 121, 47, 83, 89, 83, 47, 68, 66, 77, 83, 95, 79, 85, 84, 80, 85, 84, 59, 0, 0, 0, 7}
//                {0, 0, 8, 51, 0, 0, 0, 6, -128, 0, 0, 0, 0, 0, 51, 1, 0, 0, 0, 2, 0, 0, 0, 25, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 66, 79, 79, 76, 69, 65, 78, 59, 0, 0, 0, 7, 1, 0, 0, 0, 3, 0, 0, 0, 29, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110},
//                {47, 80, 76, 83, 95, 73, 78, 84, 69, 71, 69, 82, 59, 0, 0, 0, 7, 1, 0, 0, 0, 4, 0, 0, 0, 24, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 78, 85, 77, 66, 69, 82, 59, 0, 0, 0, 7, 1, 0, 0, 0, 5, 0, 0, 0, 22, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 68, 65, 84, 69, 59, 0, 0, 0, 7, 1, 0, 0, 0, 6, 0, 0, 0, 26, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 86, 65, 82, 67, 72, 65, 82, 50, 59, 0, 0, 0, 7, 1, 0, 0, 0, 7, 0, 0, 0, 22, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66},
//                {117, 105, 108, 116, 105, 110, 47, 67, 72, 65, 82, 59, 0, 0, 0, 7, 1, 0, 0, 0, 8, 0, 0, 0, 23, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 78, 67, 72, 65, 82, 59, 0, 0, 0, 7, 1, 0, 0, 0, 9, 0, 0, 0, 22, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 76, 79, 78, 71, 59, 0, 0, 0, 7, 1, 0, 0, 0, 10, 0, 0, 0, 21, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 82, 65, 87, 59, 0, 0, 0, 7, 1, 0, 0, 0, 11, 0, 0, 0, 25, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116},
//                {105, 110, 47, 76, 79, 78, 71, 82, 65, 87, 59, 0, 0, 0, 7, 1, 0, 0, 0, 12, 0, 0, 0, 23, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 82, 79, 87, 73, 68, 59, 0, 0, 0, 7, 1, 0, 0, 0, 13, 0, 0, 0, 24, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 85, 82, 79, 87, 73, 68, 59, 0, 0, 0, 7, 1, 0, 0, 0, 14, 0, 0, 0, 26, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 77, 76, 83, 76, 65, 66, 69, 76, 59, 0, 0, 0, 7, 1, 0, 0, 0, 15, 0, 0, 0, 22, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66},
//                {117, 105, 108, 116, 105, 110, 47, 66, 76, 79, 66, 59, 0, 0, 0, 7, 1, 0, 0, 0, 16, 0, 0, 0, 22, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 67, 76, 79, 66, 59, 0, 0, 0, 7, 1, 0, 0, 0, 17, 0, 0, 0, 23, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 66, 70, 73, 76, 69, 59, 0, 0, 0, 7, 1, 0, 0, 0, 18, 0, 0, 0, 24, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 67, 85, 82, 83, 79, 82, 59, 0, 0, 0, 7, 1, 0, 0, 0, 19, 0, 0, 0, 27, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105},
//                {108, 116, 105, 110, 47, 82, 69, 70, 67, 85, 82, 83, 79, 82, 59, 0, 0, 0, 7, 1, 0, 0, 0, 20, 0, 0, 0, 21, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 82, 69, 70, 59, 0, 0, 0, 7, 1, 0, 0, 0, 21, 0, 0, 0, 27, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 84, 73, 77, 69, 83, 84, 65, 77, 80, 59, 0, 0, 0, 7, 1, 0, 0, 0, 22, 0, 0, 0, 41, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 84, 73, 77, 69, 83, 84, 65, 77, 80, 95, 87, 73, 84, 72, 95, 84, 73, 77, 69, 90, 79, 78, 69, 59, 0, 0},
//                {0, 7, 1, 0, 0, 0, 23, 0, 0, 0, 47, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 84, 73, 77, 69, 83, 84, 65, 77, 80, 95, 87, 73, 84, 72, 95, 76, 79, 67, 65, 76, 95, 84, 73, 77, 69, 90, 79, 78, 69, 59, 0, 0, 0, 7, 1, 0, 0, 0, 24, 0, 0, 0, 40, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 73, 78, 84, 69, 82, 86, 65, 76, 95, 89, 69, 65, 82, 95, 84, 79, 95, 77, 79, 78, 84, 72, 59, 0, 0, 0, 7, 1, 0, 0, 0, 25, 0, 0, 0, 40, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 73, 78, 84, 69, 82},
//                {86, 65, 76, 95, 68, 65, 89, 95, 84, 79, 95, 83, 69, 67, 79, 78, 68, 59, 0, 0, 0, 7, 1, 0, 0, 0, 26, 0, 0, 0, 30, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 66, 73, 78, 65, 82, 89, 95, 70, 76, 79, 65, 84, 59, 0, 0, 0, 7, 1, 0, 0, 0, 27, 0, 0, 0, 31, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 66, 73, 78, 65, 82, 89, 95, 68, 79, 85, 66, 76, 69, 59, 0, 0, 0, 7, 1, 0, 0, 0, 28, 0, 0, 0, 23, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 70, 76, 79, 65, 84, 59, 0, 0, 0, 7, 1, 0, 0, 0},
//                {29, 0, 0, 0, 27, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 78, 86, 65, 82, 67, 72, 65, 82, 50, 59, 0, 0, 0, 7, 1, 0, 0, 0, 30, 0, 0, 0, 23, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 78, 67, 76, 79, 66, 59, 0, 0, 0, 7, 1, 0, 0, 0, 31, 0, 0, 0, 33, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 86, 65, 82, 67, 72, 65, 82, 50, 95, 65, 78, 89, 95, 67, 83, 59, 0, 0, 0, 7, 1, 0, 0, 0, 32, 0, 0, 0, 29, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 67, 72},
//                {65, 82, 95, 65, 78, 89, 95, 67, 83, 59, 0, 0, 0, 7, 1, 0, 0, 0, 33, 0, 0, 0, 29, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 67, 76, 79, 66, 95, 65, 78, 89, 95, 67, 83, 59, 0, 0, 0, 7, 1, 0, 0, 0, 34, 0, 0, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 0, 0, 0, 7, 1, 0, 0, 0, 35, 0, 0, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 0, 0, 0, 7, 1, 0, 0, 0, 36, 0, 0, 0, 17, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 0, 0, 0, 7, 1, 0, 0, 0, 37, 0, 0, 0, 23, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 101, 97, 100, 71, 114, 111, 117, 112, 59, 0, 0, 0, 7, 1, 0, 0, 0, 38, 0, 0, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 101, 97, 100, 59, 0, 0, 0, 7, 1, 0, 0, 0, 39, 0, 0, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 0},
//                {0, 0, 7, 1, 0, 0, 0, 40, 0, 0, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 69, 120, 99, 101, 112, 116, 105, 111, 110, 59, 0, 0, 0, 7, 1, 0, 0, 0, 41, 0, 0, 0, 27, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 69, 88, 67, 69, 80, 84, 73, 79, 78, 59, 0, 0, 0, 7, 1, 0, 0, 0, 42, 0, 0, 0, 31, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 79, 82, 65, 59, 0, 0, 0, 7, 1, 0, 0, 0, 43, 0, 0, 0, 32, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 85, 83, 69, 82, 59, 0, 0, 0, 7, 1, 0, 0, 0, 44, 0, 0, 0, 23, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 59, 0, 0, 0, 7, 1, 0, 0, 0, 45, 0, 0, 0, 24, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 79, 80, 65, 81, 85, 69, 59, 0, 0, 0, 7, 1, 0, 0, 0, 46, 0, 0, 0, 22},
//                {76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 73, 68, 76, 69, 59, 0, 0, 0, 7, 1, 0, 0, 0, 47, 0, 0, 0, 50, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 108, 111, 99, 107, 47, 83, 76, 65, 80, 83, 95, 85, 83, 69, 82, 47, 66, 72, 109, 54, 90, 108, 98, 70, 98, 112, 48, 49, 55, 117, 106, 69, 114, 65, 85, 88, 111, 99, 81, 59, 0, 0, 0, 7, 1, 0, 0, 0, 48, 0, 0, 0, 37, 76, 36, 79, 114, 97, 99, 108, 101, 47, 80, 97, 99, 107, 97, 103, 101, 47, 83, 89, 83, 47, 68, 66, 77, 83, 95, 68, 69, 66, 85, 71, 95, 74, 68, 87, 80, 59, 0, 0, 0, 7, 1, 0, 0, 0, 49, 0, 0, 0, 41, 76, 36, 79, 114, 97, 99, 108, 101, 47, 80, 97, 99, 107, 97, 103, 101, 66, 111, 100, 121, 47, 83, 89, 83, 47, 68, 66, 77, 83, 95, 68, 69, 66, 85, 71, 95, 74, 68, 87, 80, 59, 0, 0, 0, 7, 1, 0, 0, 0, 50, 0, 0, 0, 44, 76, 36, 79, 114, 97, 99, 108, 101, 47, 80, 97, 99, 107, 97, 103, 101, 47, 83, 89, 83, 47, 68, 66, 77, 83, 95, 78, 69, 84, 87, 79, 82, 75, 95, 65, 67, 76, 95, 65, 68, 77, 73, 78},
//                {59, 0, 0, 0, 7, 1, 0, 0, 0, 51, 0, 0, 0, 48, 76, 36, 79, 114, 97, 99, 108, 101, 47, 80, 97, 99, 107, 97, 103, 101, 66, 111, 100, 121, 47, 83, 89, 83, 47, 68, 66, 77, 83, 95, 78, 69, 84, 87, 79, 82, 75, 95, 65, 67, 76, 95, 65, 68, 77, 73, 78, 59, 0, 0, 0, 7, 1, 0, 0, 0, 52, 0, 0, 0, 35, 76, 36, 79, 114, 97, 99, 108, 101, 47, 66, 117, 105, 108, 116, 105, 110, 47, 80, 76, 83, 81, 76, 95, 76, 79, 65, 68, 69, 82, 64, 79, 82, 67, 76, 59, 0, 0, 0, 7}
                {0, 0, 0, 25, 0, 0, 0, 1, 0, 64, 100, 2, 0, 0, 0, 1, 90, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 25, 0, 0, 0, 1, 0, 64, 100, 2, 0, 0, 0, 1, 90, 0, 0, 0, 0, 0, 0, 0, 1}
        };
        int index = 0;

        public void read(ByteBuffer buffer) {
            buffer.put(data[index++]);
        }
    }
    static TunnelConnection debugConnection = new TunnelConnection();
    static ByteBuffer readBuffer = ByteBuffer.allocate(5000);

    public static void main(String[] args) {
        readBuffer.put(new byte[14]);
        readBuffer.clear();
        readPacket();
        readPacket();
    }

    private static byte[] readPacket() {
        if (readBuffer.position() > 0) {
            // the buffer contains incomplete packet
            int packetLength = readBuffer.getInt(0);
            while(readBuffer.position() < packetLength) {
                debugConnection.read(readBuffer);
            }

            readBuffer.flip();
            byte[] packet = new byte[packetLength];
            readBuffer.get(packet);

            if (readBuffer.hasRemaining()) {
                byte[] extra = new byte[readBuffer.limit() - readBuffer.position()];
                readBuffer.get(extra);
                readBuffer.clear();
                readBuffer.put(extra);
            }

            System.out.println("length = " + packet.length + "\n" + Arrays.toString(packet));
            return packet;
        }

        readBuffer.clear();
        debugConnection.read(readBuffer);
        return readPacket();
    }

}